{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SST (Spatial Stress Test) Behavioral Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Collected June 2015"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v2\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import moss\n",
    "from scipy import stats\n",
    "import scipy as sp\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import os.path as op\n",
    "import re\n",
    "\n",
    "#widget ability\n",
    "import ipywidgets\n",
    "from ipywidgets import interact, interactive, fixed\n",
    "from IPython.display import clear_output, display, HTML\n",
    "\n",
    "import glob\n",
    "\n",
    "# Gather project info & functions\n",
    "from sst_setup_project import *\n",
    "\n",
    "# for plotting\n",
    "sns.set(style='whitegrid', context='poster')\n",
    "%matplotlib inline\n",
    "\n",
    "# R for stats\n",
    "# %load_ext rpy2.ipython\n",
    "# %R require(lme4)\n",
    "# %R require(lmerTest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set up directories & exp-specific information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "dirs = dict()\n",
    "dirs['basedir'] = op.join(op.expanduser('~'), 'Experiments/SST')\n",
    "dirs['navdir'] = op.join('/Volumes/group/awagner/sgagnon/SST/nav_data')\n",
    "dirs['analydir'] = op.join(dirs['basedir'], 'analysis')\n",
    "dirs['subj_info_file'] = op.join(dirs['basedir'], 'data', 'subj_info.csv')\n",
    "dirs['shortcut_file'] = op.join(dirs['basedir'], 'data','shortcut_coords.csv')\n",
    "dirs['order_file'] = op.join(dirs['basedir'], 'data','SST_env_order_training.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v2\n"
     ]
    }
   ],
   "source": [
    "proj = gather_experiment_info(exp_name='SST', dirs=dirs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in subject information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "control    19\n",
       "stress     17\n",
       "Name: group, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subj_info = pd.read_csv(dirs['subj_info_file'])\n",
    "subj_info = subj_info[pd.isnull(subj_info.remove)]\n",
    "subj_info[['subid']] = subj_info.subid.astype(str)\n",
    "subj_info.group.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>env</th>\n",
       "      <th>x_lo</th>\n",
       "      <th>x_hi</th>\n",
       "      <th>y_lo</th>\n",
       "      <th>y_hi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>env1</td>\n",
       "      <td>16</td>\n",
       "      <td>32</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>env2</td>\n",
       "      <td>8</td>\n",
       "      <td>28</td>\n",
       "      <td>28</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>env3</td>\n",
       "      <td>24</td>\n",
       "      <td>40</td>\n",
       "      <td>16</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>env4</td>\n",
       "      <td>16</td>\n",
       "      <td>32</td>\n",
       "      <td>16</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>env5</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>env6</td>\n",
       "      <td>24</td>\n",
       "      <td>40</td>\n",
       "      <td>24</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>env7</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>env8</td>\n",
       "      <td>16</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>env9</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>env10</td>\n",
       "      <td>48</td>\n",
       "      <td>56</td>\n",
       "      <td>24</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>env11</td>\n",
       "      <td>24</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>env12</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      env  x_lo  x_hi  y_lo  y_hi\n",
       "0    env1    16    32     5    15\n",
       "1    env2     8    28    28    48\n",
       "2    env3    24    40    16    24\n",
       "3    env4    16    32    16    24\n",
       "4    env5    12    20    20    31\n",
       "5    env6    24    40    24    40\n",
       "6    env7    10    15    30    40\n",
       "7    env8    16    32     0    16\n",
       "8    env9    24    35     0    12\n",
       "9   env10    48    56    24    40\n",
       "10  env11    24    32    40    48\n",
       "11  env12    24    35    30    45"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shortcut_coords = pd.read_csv(dirs['shortcut_file'])\n",
    "shortcut_coords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>subid</th>\n",
       "      <th>rep</th>\n",
       "      <th>run</th>\n",
       "      <th>trial</th>\n",
       "      <th>env</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    subid  rep  run  trial  env\n",
       "499    23    2    2      8   12\n",
       "500    23    2    2      9    1\n",
       "501    23    2    2     10   10\n",
       "502    23    2    2     11    8\n",
       "503    23    2    2     12    7"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trial_order = pd.read_csv(dirs['order_file'])\n",
    "trial_order[['subid']] = trial_order[['subid']].astype(str)\n",
    "trial_order.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read in/concatenate data files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Only need to run this if first time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      " ****** Missing data for run 2\n",
      "Number of trials: 12\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sgagnon/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:76: FutureWarning: sort(columns=....) is deprecated, use sort_values(by=.....)\n",
      "/Users/sgagnon/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:79: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "subj d2 shape:(103935, 11)\n",
      "12\n",
      "12\n",
      "subj dp (downsampled) shape:(1259, 15)\n",
      "Group df shape: (1259, 15)\n",
      "_______________________________________\n",
      "4\n",
      "Number of trials: 24\n",
      "subj d2 shape:(198189, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2546, 15)\n",
      "Group df shape: (3805, 15)\n",
      "_______________________________________\n",
      "5\n",
      "***** something happened, 2 files for run 1! *****\n",
      "Number of trials: 24\n",
      "subj d2 shape:(223116, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2821, 15)\n",
      "Group df shape: (6626, 15)\n",
      "_______________________________________\n",
      "6\n",
      "Number of trials: 24\n",
      "subj d2 shape:(257845, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(3001, 15)\n",
      "Group df shape: (9627, 15)\n",
      "_______________________________________\n",
      "7\n",
      "Number of trials: 24\n",
      "subj d2 shape:(224220, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2697, 15)\n",
      "Group df shape: (12324, 15)\n",
      "_______________________________________\n",
      "9\n",
      "***** something happened, 2 files for run 2! *****\n",
      "Number of trials: 24\n",
      "subj d2 shape:(199489, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2588, 15)\n",
      "Group df shape: (14912, 15)\n",
      "_______________________________________\n",
      "10\n",
      "***** something happened, 2 files for run 2! *****\n",
      "Number of trials: 24\n",
      "subj d2 shape:(228777, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(11283, 15)\n",
      "Group df shape: (26195, 15)\n",
      "_______________________________________\n",
      "11\n",
      "Number of trials: 21\n",
      "subj d2 shape:(195952, 11)\n",
      "21\n",
      "21\n",
      "subj dp (downsampled) shape:(2288, 15)\n",
      "Group df shape: (28483, 15)\n",
      "_______________________________________\n",
      "12\n",
      "Number of trials: 24\n",
      "subj d2 shape:(221392, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(3684, 15)\n",
      "Group df shape: (32167, 15)\n",
      "_______________________________________\n",
      "13\n",
      "***** something happened, 2 files for run 1! *****\n",
      "Number of trials: 21\n",
      "subj d2 shape:(195230, 11)\n",
      "21\n",
      "21\n",
      "subj dp (downsampled) shape:(2371, 15)\n",
      "Group df shape: (34538, 15)\n",
      "_______________________________________\n",
      "14\n",
      "Number of trials: 24\n",
      "subj d2 shape:(221463, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2834, 15)\n",
      "Group df shape: (37372, 15)\n",
      "_______________________________________\n",
      "15\n",
      "***** something happened, 2 files for run 1! *****\n",
      "***** something happened, 3 files for run 1! *****\n",
      "***** something happened, 2 files for run 2! *****\n",
      "Number of trials: 24\n",
      "subj d2 shape:(229441, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2724, 15)\n",
      "Group df shape: (40096, 15)\n",
      "_______________________________________\n",
      "16\n",
      "Number of trials: 24\n",
      "subj d2 shape:(221754, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2735, 15)\n",
      "Group df shape: (42831, 15)\n",
      "_______________________________________\n",
      "18\n",
      "Number of trials: 24\n",
      "subj d2 shape:(214958, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2704, 15)\n",
      "Group df shape: (45535, 15)\n",
      "_______________________________________\n",
      "19\n",
      "Number of trials: 24\n",
      "subj d2 shape:(224590, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2702, 15)\n",
      "Group df shape: (48237, 15)\n",
      "_______________________________________\n",
      "20\n",
      "Number of trials: 24\n",
      "subj d2 shape:(233145, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(3049, 15)\n",
      "Group df shape: (51286, 15)\n",
      "_______________________________________\n",
      "21\n",
      "Number of trials: 24\n",
      "subj d2 shape:(175840, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(2800, 15)\n",
      "Group df shape: (54086, 15)\n",
      "_______________________________________\n",
      "22\n",
      "***** something happened, 2 files for run 2! *****\n",
      "***** something happened, 3 files for run 2! *****\n",
      "Number of trials: 25\n",
      "subj d2 shape:(208074, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(3110, 15)\n",
      "Group df shape: (57196, 15)\n",
      "_______________________________________\n",
      "23\n",
      "***** something happened, 2 files for run 1! *****\n",
      "Number of trials: 24\n",
      "subj d2 shape:(257564, 11)\n",
      "24\n",
      "24\n",
      "subj dp (downsampled) shape:(3001, 15)\n",
      "Group df shape: (60197, 15)\n",
      "_______________________________________\n"
     ]
    }
   ],
   "source": [
    "df = pd.DataFrame() # dataframe of subjs x envs\n",
    "test = True\n",
    "n_runs = 2\n",
    "\n",
    "test_types = ['habit']\n",
    "\n",
    "# iterate through subjects\n",
    "for subid in subj_info.subid[:19]:\n",
    "# for subid in ['7', '9', '15']:\n",
    "    print subid\n",
    "    \n",
    "    if test:\n",
    "        d2 = pd.DataFrame() # dataframe of test files for a subj\n",
    "\n",
    "        # iterate through environments\n",
    "        for run_num in range(1, n_runs+1):\n",
    "\n",
    "            # deal w/num -> str IDs\n",
    "            if int(subid) < 10:\n",
    "                sub_str = 'sst0'\n",
    "            else:\n",
    "                sub_str = 'sst'\n",
    "                \n",
    "            # add test file\n",
    "            test_files = glob.glob(op.join(dirs['navdir'], sub_str + str(subid), \n",
    "                                           'day2_run'+ str(run_num),\n",
    "                                           'session_*', 'log.txt'))\n",
    "            if len(test_files) < 1: print ' ****** Missing data for run ' + str(run_num)\n",
    "            \n",
    "            # get all files, including crashes where 2 files/run\n",
    "            # note that grouping files into same run if a crash; \n",
    "            # this will be diff than for fmri data (where 2 sep runs)\n",
    "            for i, test_file in enumerate(test_files):\n",
    "                \n",
    "                if i > 0: print '***** something happened, '+str(i+1)+' files for run ' +str(run_num)+'! *****'\n",
    "                \n",
    "                output = []\n",
    "                with open(test_file) as f:\n",
    "                    data = f.readlines()\n",
    "\n",
    "                    for line in data:\n",
    "                        columns = re.split('\\t|\\r|\\n', line)\n",
    "                        output.append(columns)\n",
    "\n",
    "                d1 = pd.DataFrame(output, columns = ['time', 'c2', 'command', \n",
    "                                                     'c3', 'c4', 'c5', 'c6', 'c7', 'c8'])\n",
    "\n",
    "                # include subid and env + habit\n",
    "                d1['subid'] = subid\n",
    "                d1['run'] = run_num\n",
    "                d1['type'] = 'habit'\n",
    "                d1['log_dir'] = test_file\n",
    "\n",
    "                # force time to in seconds, relative to beginning of session\n",
    "                d1.time = d1.time.astype(int)/1000\n",
    "                \n",
    "                if (run_num == 1) & (i == 0):\n",
    "                    session_start = d1.time.min() # beginning of session\n",
    "                d1.time = d1.time - session_start\n",
    "\n",
    "                # Append to subj's dataframe\n",
    "                d2 = d2.append(d1, ignore_index=True)\n",
    "        \n",
    "\n",
    "        # get rid of some unnessary stuff\n",
    "        d2 = d2.loc[d2.command.isin(['VROBJECT_POS', 'VROBJECT_HEADING', 'INPUT_EVENT',\n",
    "                                     'ORIENT', 'ARRIVED', 'ASSIGNED', 'NAVIGATE', \n",
    "                                     'SCAN', 'SHOCK'])]\n",
    "        d2.drop(['c2', 'c5', 'c6', 'c7', 'c8'], axis=1, inplace=True) #unneeded cols\n",
    "\n",
    "        # trial counts:\n",
    "        counts = pd.groupby(d2.loc[d2.command == \"ORIENT\"], by=['subid', 'run']).count().reset_index()\n",
    "        print 'Number of trials: ' + str(counts.command.sum())\n",
    "        \n",
    "        # Get orient onsets, for trial parsing\n",
    "        d2.sort(columns='time', inplace=True) # make sure sorted by time! this can be weird w/crashes\n",
    "        \n",
    "        orient_onsets = d2[d2.command == \"ORIENT\"]\n",
    "        orient_onsets['trial'] = 0 # init trial number\n",
    "\n",
    "        for counter, ind in enumerate(orient_onsets.index):\n",
    "            if counter == 0: # first trial\n",
    "                first_ind = ind\n",
    "                orient_onsets.loc[ind, 'trial'] = 1\n",
    "                prev_ind = ind\n",
    "            else:\n",
    "                if orient_onsets.loc[ind, 'run'] == orient_onsets.loc[prev_ind, 'run']:\n",
    "                    orient_onsets.loc[ind, 'trial'] = orient_onsets.loc[prev_ind, 'trial'] + 1\n",
    "                    prev_ind = ind\n",
    "                else: #first trial in another run\n",
    "                    orient_onsets.loc[ind, 'trial'] = 1\n",
    "                    prev_ind = ind\n",
    "                    \n",
    "#         print 'Orient onsets set:'\n",
    "#         print set(orient_onsets.trial)\n",
    "\n",
    "        orient_onsets = orient_onsets.reset_index().merge(trial_order)\n",
    "#         print orient_onsets\n",
    "\n",
    "        d2['env'] = np.nan\n",
    "        d2['rep'] = np.nan\n",
    "        d2['trial'] = np.nan\n",
    "\n",
    "        for i in orient_onsets.index:\n",
    "            index_val = orient_onsets.loc[i, 'index']\n",
    "            d2.loc[index_val, 'env'] = 'env' + orient_onsets.loc[i, 'env'].astype(str)\n",
    "            d2.loc[index_val, 'rep'] = orient_onsets.loc[i, 'rep']\n",
    "            d2.loc[index_val, 'trial'] = orient_onsets.loc[i, 'trial']\n",
    "\n",
    "        d2.env.fillna(method='ffill', inplace=True)\n",
    "        d2.rep.fillna(method='ffill', inplace=True)\n",
    "        d2.trial.fillna(method='ffill', inplace=True)\n",
    "\n",
    "        d2 = d2.loc[~d2.env.isnull()]\n",
    "\n",
    "        print 'subj d2 shape:' + str(d2.shape)\n",
    "        print len('env' + orient_onsets.env.astype(str))\n",
    "        print len(d2.loc[orient_onsets['index'], 'env'])\n",
    "        \n",
    "\n",
    "        # Get 2D position in space\n",
    "        dp = d2[d2.command == 'VROBJECT_POS'].reset_index()\n",
    "        coordinates = pd.DataFrame(dp.c4.str.split('Point3|, |\\(|\\)').tolist())[[2, 3, 4]]\n",
    "        coordinates.rename(columns={2: 'x', 3: 'y', 4: 'z'}, inplace=True)\n",
    "\n",
    "        dp = dp.join(coordinates)\n",
    "        dp = dp.drop(['c4'], 1)\n",
    "        dp[['x', 'y', 'z']] = dp[['x', 'y', 'z']].astype(float)\n",
    "        dp.head()\n",
    "\n",
    "        # Downsample\n",
    "        dp['s'] = pd.to_datetime(dp.time, unit='s')\n",
    "        dp = dp.resample('500L', on='s').first()\n",
    "        dp.dropna(inplace=True)\n",
    "        \n",
    "        print 'subj dp (downsampled) shape:' + str(dp.shape)\n",
    "\n",
    "        # Append to group data\n",
    "        df = df.append(dp, ignore_index=True)\n",
    "        print 'Group df shape: ' + str(df.shape)\n",
    "        print '_______________________________________'\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Look at data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "filename = '/Volumes/group/awagner/sgagnon/SST/nav_data/group_behavioral_logs.h5'\n",
    "df.to_hdf(filename, 'df', mode='w', format='fixed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60197, 15)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filename = '/Volumes/group/awagner/sgagnon/SST/nav_data/group_behavioral_logs.h5'\n",
    "df_in = pd.read_hdf(filename, 'df')\n",
    "df_in.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Subject 3 missing run 2\n",
    "- Subjects 22 have off env/trials [in run 2, crashed during env 5, but then restarted en]\n",
    "- Subjects 13 missing trials 1-3 from run 1 [shifted envs up in order file, and removed trials 10-12]\n",
    "- Subject 11, run 2 (missing trials 1-3) [shifted envs up in order file, and removed trials 10-12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\naXr26wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12846d490>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_sub(subj, env, test_trial, rep):\n",
    "    plot_paths(env=env, subj=subj, \n",
    "               dp=df_in.loc[(df_in['type'] == test_trial) &\n",
    "                            (df_in.rep == rep)], \n",
    "               proj=proj, dirs=dirs)\n",
    "    \n",
    "subj_opts = ipywidgets.Select(options=list(df_in.subid.unique()))\n",
    "env_opts = ipywidgets.ToggleButtons(options=list(np.sort(df_in.env.unique())))\n",
    "test_opts = ipywidgets.ToggleButtons(options=list(['habit', 'shortcut']))\n",
    "rep_opts = ipywidgets.IntSlider(min=1, max=2)\n",
    "\n",
    "w = ipywidgets.interact(plot_sub, \n",
    "                        subj=subj_opts, \n",
    "                        env=env_opts, \n",
    "                        test_trial=test_opts, \n",
    "                        rep=rep_opts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
